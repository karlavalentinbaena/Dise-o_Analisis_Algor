//El único "problema" que no pude corregir, es que no pude hacer que en mi lap saliera la ventana completa, la última fila no se ve 
//El código lo completé con lo que habiamos visto en la clase
//El código lo hice en precessing
//Costo computacional del tablero: creoq ue seria O(n^2)porque hay un bucle que está anidad. 
//para lo de resolver cómo se van a acomdar las reinas, seria O(n!) porque para la priemra hay 64 posiciones, para la sig. hay 63 y asi.
int R[][]=new int[8][8]; //Crear el tablero de 8x8
//Diseño del tablero con blanco y negro
void setup(){
  size(800,800); //tamaño de la ventana del tablero, aunque no se puede ampliar para ver toda
  //background(255,255,255); //Color de fondo que es el blanco
  int x1 = 0, y1 = 0; //se declaran e inician x y y con 0
  int x2 = 100, y2 = 0; //aquí x2 vale 100 y y2 0
  for(int i=0; i < 8;i++){ //representan las filas 
    for(int j=0; j< 4;j++){ //las columnas
     if(i%2 == 0){ //si el número de la fila es par, va a pintar: 
       drawRect(x1, y1, x2, y2);
     }else{ //sino va a pintar: 
       drawRect(x2, y2, x1, y1);
     }
     //incremento para separación
     x1 += 200;
     x2 += 200;
    }
    //Desplazamiento de los cuadrados de 'x' y 'y'
    x1 = 0; //empieza en la izq
    x2 = 100; // separación de 100 px 
    y1 += 100;
    y2 += 100;
  }
   reinas(0);
  //Estas son las posiciones en las que deberian de ir algunas las reinas 
  //Si no estuvieran comentadas, creo que no es necesario programar algo más ya que aparecen en la posición asignada:
  //R[0][0]=1;
  //R[1][6]=1;
  //R[2][4]=1;
  //R[3][7]=1; 
}
// Función para resolver el ejercicio
boolean reinas(int fila) { //en dónde se va a poner una reina
  if (fila >= 8) { //si el valor es mayor o igual a 8 para ver si intentamos poner reinas
    return true;
  }

  for (int i = 0; i < 8; i++) { //recorre las columnas
    if (esPosible(fila, i)) { // se puede colocar o no 
      R[fila][i] = 1;  // se pone 1 si se puede poner una reina en esa casilla
      // se pone reina en la sig. fila, si ya no es posible poner en esa
      if (reinas(fila + 1)) {
        return true;
      }
      // Si no es posible, no se pone nada y se va a otra columna a ver si sí
      R[fila][i] = 0;
    }    
  }
  // No se puede poner reina en la columna
  return false;
}
// Función para verificar si es seguro colocar una reina en la posición (fila, columna)
boolean esPosible(int fila, int columna) { //toma las posiciones del tablero
  // se ve si ya hay una reina puesta
  for (int i = 0; i < fila; i++) {
    if (R[i][columna] == 1) { //si hay una reina en la misma col de la fila que se está:
      return false; //no se puede poner una reina
    }
  }

  //diag. sup. izq
  for (int i = fila, j = columna; //se asina el valor de i a j 
       i >= 0 && j >= 0; i--, j--) {//si i y j son mayores a 0, se va disminuyendo hasta llegar a la esquina izq
    if (R[i][j] == 1) { // se ve si hay una reina de ese lado
      return false; //si no es posible poner una reina porque chocaria con una de la sup. izq
    }
  }

  // diag. sup. der
  for (int i = fila, j = columna;//igual se asigna el valor de i a j 
  i >= 0 && j < 8; i--, j++) { //ahora si j es menor a 0, j incrementa 
    if (R[i][j] == 1) {
      return false;
    }
  }
  return true;  //se puede colocar una reina
}
void drawRect(int x1, int y1, int x2, int y2){ //tablero
  fill(255,255,255); //llenar con color blanco
  rect(x1,y1,100,100); //esta posición es la que se rellena
  fill(0,0,0); //llenar con negro
  rect(x2, y2,100,100); //esta posción
}

void draw(){
  
  int x=0;
  int y=0;
 //Se ve si hay una reina 
  for(int i=0; i < 8;i++){
    for(int j=0; j< 8;j++){
      if(R[i][j]==1){
        fill(245, 0, 135); //Los cambié a circulos rosas
        circle(x+50,y+50,80); //Dibujarlo en la posición
      }
      x+=100;
    }
    x=0;
    y+=100;
  }
}
